
import React, { useState, useCallback, ChangeEvent, useEffect } from 'react';
import readXlsxFile from 'read-excel-file';
import { PhoneNumberInput } from './components/PhoneNumberInput';
import { MessageComposer } from './components/MessageComposer';
import { MessageList } from './components/MessageList';
import { LoadingIcon } from './components/icons';

const App: React.FC = () => {
  const [phoneNumbers, setPhoneNumbers] = useState<string[]>([]);
  const [baseMessage, setBaseMessage] = useState<string>('');
  const [isProcessingFile, setIsProcessingFile] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null); 
  const [fileError, setFileError] = useState<string | null>(null);
  const [fileSuccess, setFileSuccess] = useState<string | null>(null);

  const formatPhoneNumberForStorage = (numberStr: string): string => {
    let cleaned = numberStr.replace(/[^\d+]/g, ''); // Keeps digits and leading '+'
    if (!cleaned.startsWith('+')) {
      const justDigits = cleaned.replace(/\D/g, ''); // Ensure we count only digits
      if (justDigits.length === 10 || justDigits.length === 11) { // Heuristic for Brazilian numbers (DDD + number)
        cleaned = '+55' + justDigits;
      }
      // If still no '+', it means it's not a 10/11 digit number we auto-prefixed,
      // or it was shorter. It will be stored as digits-only if no '+' was ever present.
      // If it was like "123", it remains "123". If "abc123def", also "123".
    }
    return cleaned;
  };

  const handleAddPhoneNumber = (number: string) => {
    const formattedNumber = formatPhoneNumberForStorage(number);
    if (formattedNumber && (formattedNumber.startsWith('+') || formattedNumber.replace(/\D/g,'').length > 0) && !phoneNumbers.includes(formattedNumber)) {
      setPhoneNumbers(prev => [...prev, formattedNumber]);
      setError(null);
      setFileError(null);
      setFileSuccess(null);
    }
  };

  const handleRemovePhoneNumber = (numberToRemove: string) => {
    setPhoneNumbers(prev => prev.filter(number => number !== numberToRemove));
  };

  const handleFileUpload = async (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) {
      return;
    }

    setIsProcessingFile(true);
    setFileError(null);
    setFileSuccess(null);
    setError(null);

    const CNPJ_COLUMN_INDEX = 0; // Coluna A
    const PHONE_COLUMN_INDEX = 19; // Coluna T

    try {
      let importedPhonesForProcessing: string[] = [];
      
      if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
        const rows = await readXlsxFile(file);
        const processedCnpjs = new Set<string>();
        let rawPairsExtractedCount = 0;
        rows.forEach(row => {
          if (row.length > Math.max(CNPJ_COLUMN_INDEX, PHONE_COLUMN_INDEX)) {
            const cnpj = String(row[CNPJ_COLUMN_INDEX]).trim();
            const phone = String(row[PHONE_COLUMN_INDEX]).trim();
            if (cnpj && phone) {
              rawPairsExtractedCount++;
              if (!processedCnpjs.has(cnpj)) {
                importedPhonesForProcessing.push(phone);
                processedCnpjs.add(cnpj);
              }
            }
          }
        });
         if (rawPairsExtractedCount === 0 && importedPhonesForProcessing.length === 0) {
           throw new Error("Nenhum par CNPJ/Telefone foi encontrado nas colunas A e T do arquivo Excel/CSV. Verifique se as colunas estão corretas e se os dados estão presentes.");
        }

      } else if (file.name.endsWith('.csv')) {
        const text = await file.text();
        const lines = text.split(/\r\n|\n/);
        const processedCnpjs = new Set<string>();
        let rawPairsExtractedCount = 0;
        lines.forEach(line => {
          const columns = line.split(',');
          if (columns.length > Math.max(CNPJ_COLUMN_INDEX, PHONE_COLUMN_INDEX)) {
            const cnpj = String(columns[CNPJ_COLUMN_INDEX]).trim();
            const phone = String(columns[PHONE_COLUMN_INDEX]).trim();
            if (cnpj && phone) {
              rawPairsExtractedCount++;
              if (!processedCnpjs.has(cnpj)) {
                importedPhonesForProcessing.push(phone);
                processedCnpjs.add(cnpj);
              }
            }
          }
        });
        if (rawPairsExtractedCount === 0 && importedPhonesForProcessing.length === 0) {
           throw new Error("Nenhum par CNPJ/Telefone foi encontrado nas colunas A e T do arquivo CSV. Verifique se as colunas estão corretas e se os dados estão presentes.");
        }
      } else if (file.name.endsWith('.txt')) {
        const text = await file.text();
        const lines = text.split(/\r\n|\n/);
        lines.forEach(line => {
          const phone = line.trim();
          if (phone) { 
            importedPhonesForProcessing.push(phone);
          }
        });
         if (importedPhonesForProcessing.length === 0) {
            throw new Error("Nenhum número de telefone encontrado no arquivo TXT. Certifique-se de que há um número por linha.");
        }
      } else {
        throw new Error("Formato de arquivo não suportado. Use .xlsx, .xls, .csv ou .txt.");
      }
      
      const validPhoneNumbers = importedPhonesForProcessing
        .map(phone => formatPhoneNumberForStorage(phone)) 
        .filter(num => (num.startsWith('+') || num.replace(/\D/g,'').length > 0) && num.replace(/\D/g,'').length > 5); // Basic phone number validity check

      const uniqueNewNumbers = validPhoneNumbers.filter(num => !phoneNumbers.includes(num));

      if (uniqueNewNumbers.length > 0) {
        setPhoneNumbers(prev => [...new Set([...prev, ...uniqueNewNumbers])]); 
        setFileSuccess(`${uniqueNewNumbers.length} novo(s) número(s) importado(s) com sucesso.`);
      } else if (validPhoneNumbers.length > 0) {
        setFileSuccess("Nenhum número novo para adicionar. Os números válidos do arquivo já podem estar na lista ou foram formatados para números já existentes.");
      } else {
         if (file.name.endsWith('.txt')) {
            throw new Error("Nenhum número de telefone válido (após limpeza, formatação e verificação de comprimento) foi encontrado no arquivo TXT.");
        } else {
            throw new Error(`Nenhum dos telefones encontrados na coluna T (Excel/CSV) resultou em um número válido após a limpeza, formatação e verificação de comprimento. Verifique o conteúdo da coluna T.`);
        }
      }
    } catch (e: any) {
      console.error("Erro ao processar arquivo:", e);
      setFileError(e.message || "Falha ao processar o arquivo.");
    } finally {
      setIsProcessingFile(false);
      if (event.target) event.target.value = ''; 
    }
  };

  const showSendSection = phoneNumbers.length > 0 && baseMessage.trim() !== '';

  return (
    <div className="min-h-screen bg-neutral flex flex-col">
      <main className="flex-grow py-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-3xl mx-auto">
          <header className="mb-10 text-center flex flex-col items-center">
            <img src="https://logodix.com/logo/544373.png" alt="App Logo" className="h-20 w-20 mb-4"/>
            <h1 className="text-4xl font-bold text-basetone sm:text-5xl">
              PROSPECTADOR PJ
            </h1>
            <p className="mt-3 text-lg text-gray-600">
              Automatiza o processo de prospecção de empresas utilizando planilhas, e disparando para o whatsapp.
            </p>
          </header>

          <div className="space-y-8">
            <section className="bg-white border border-gray-200 rounded-lg p-6">
              <h2 className="text-2xl font-semibold text-basetone mb-4">1. Adicionar Números</h2>
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-700 mb-2">A. Adicionar Manualmente</h3>
                  <PhoneNumberInput onAddPhoneNumber={handleAddPhoneNumber} />
                </div>
                <div>
                  <h3 className="text-lg font-medium text-gray-700 mb-2">B. Carregar de Arquivo <span className="text-sm text-gray-500">(.xlsx, .xls, .csv, .txt)</span></h3>
                  <p className="text-xs text-gray-500 mb-2">
                    Para Excel/CSV: CNPJs na coluna A, telefones na coluna T (primeiro telefone por CNPJ).
                  </p>
                  <p className="text-xs text-gray-500 mb-2">
                    Para TXT: Um número de telefone por linha.
                  </p>
                  <p className="text-xs text-gray-500 mb-2">
                    Números brasileiros (10 ou 11 dígitos sem '+') serão prefixados com +55.
                  </p>
                  <input
                    type="file"
                    id="fileUpload"
                    accept=".xlsx, .xls, .csv, .txt"
                    onChange={handleFileUpload}
                    className="block w-full text-sm text-gray-500
                      file:mr-4 file:py-2 file:px-4
                      file:rounded-md file:border-0
                      file:text-sm file:font-semibold
                      file:bg-primary file:text-neutral
                      hover:file:bg-secondary cursor-pointer"
                    aria-label="Carregar arquivo de contatos"
                    disabled={isProcessingFile}
                  />
                  {isProcessingFile && (
                      <div className="mt-2 flex items-center text-sm text-gray-600">
                          <LoadingIcon className="animate-spin h-4 w-4 mr-2 text-primary" />
                          Processando arquivo...
                      </div>
                  )}
                  {fileError && <p className="mt-2 text-sm text-red-600" role="alert">{fileError}</p>}
                  {fileSuccess && <p className="mt-2 text-sm text-green-600" role="status">{fileSuccess}</p>}
                </div>
              </div>

              {phoneNumbers.length > 0 && (
                <div className="mt-6 pt-4 border-t border-gray-200">
                  <h3 className="text-sm font-medium text-gray-500">Números Adicionados ({phoneNumbers.length}):</h3>
                  <ul className="mt-2 flex flex-wrap gap-2" aria-live="polite">
                    {phoneNumbers.map(num => (
                      <li key={num} className="flex items-center bg-gray-100 text-basetone text-sm font-medium pl-3 pr-1.5 py-1 rounded-full border border-gray-300">
                        {num}
                        <button
                          onClick={() => handleRemovePhoneNumber(num)}
                          className="ml-2 text-red-500 hover:text-red-700 focus:outline-none focus:ring-1 focus:ring-red-500 rounded-full p-0.5"
                          aria-label={`Remover ${num}`}
                        >
                          <span className="text-xs font-bold">&times;</span>
                        </button>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </section>

            <section className="bg-white border border-gray-200 rounded-lg p-6">
              <h2 className="text-2xl font-semibold text-basetone mb-4">2. Compor Mensagem Base</h2>
              <MessageComposer baseMessage={baseMessage} setBaseMessage={setBaseMessage} />
              {phoneNumbers.length > 0 && !baseMessage.trim() && (
                 <p className="mt-2 text-sm text-yellow-700">
                    Adicione uma mensagem base para prosseguir para o envio.
                 </p>
              )}
            </section>
            
            {showSendSection && (
              <section className="bg-white border border-gray-200 rounded-lg p-6">
                <h2 className="text-2xl font-semibold text-basetone mb-6">3. Enviar Mensagens via WhatsApp</h2>
                <MessageList phoneNumbers={phoneNumbers} baseMessage={baseMessage} />
              </section>
            )}
            {!showSendSection && phoneNumbers.length > 0 && baseMessage.trim() === '' && (
                 <p className="text-center text-gray-500">
                    Complete a mensagem base na seção 2 para ver as opções de envio.
                 </p>
            )}
             {!showSendSection && phoneNumbers.length === 0 && (
                 <p className="text-center text-gray-500">
                    Adicione números na seção 1 e componha uma mensagem base na seção 2 para enviar.
                 </p>
            )}

          </div>
        </div>
      </main>
      <footer className="bg-neutral text-center">
        <div className="max-w-3xl mx-auto pt-8 pb-4 px-4 sm:px-6 lg:px-8">
          <p className="text-sm text-gray-500">Made by Gabriel Klippel</p>
        </div>
        <div className="w-full max-w-3xl mx-auto h-20 overflow-hidden rounded-lg shadow-md mb-4">
           <img
            src="https://sdmntprwestus.oaiusercontent.com/files/00000000-eb60-6230-9b08-23f212e0af06/raw?se=2025-05-28T00%3A18%3A16Z&sp=r&sv=2024-08-04&sr=b&scid=4b7992be-8526-5b60-ad22-5358b2f0c41a&skoid=61180a4f-34a9-42b7-b76d-9ca47d89946d&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-05-27T22%3A13%3A25Z&ske=2025-05-28T22%3A13%3A25Z&sks=b&skv=2024-08-04&sig=x2ceW3bqRe7eHYQUxWt6idXLOz18uzoRnzgjYYKqwpM%3D"
            alt="Banner de Rodapé com texto Plan Adapt Overcome"
            className="w-full h-full object-cover object-center"
          />
        </div>
      </footer>
    </div>
  );
};

export default App;
